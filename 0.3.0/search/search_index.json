{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 Welcome to mkdocs-versioning! mkdocs-versioning is a tool that allows you to version documentation built using mkdocs allowing users to access historical versions of documentation. mkdocs-versioning works by building each documentation version into its own folder and having a central, continuously updating version selection page which points to each version built. Design \u00b6 mkdocs-versioning is designed with the following principles in mind: Theme agnostic : The plugin should work with any mkdocs theme. mkdocs-versioning takes advantage of the navigation links to implement versioning. Strict versioning : Once a documentation is built, it should NOT be overwritten. mkdocs-versioning uses a centralised, continuously updated version selection page which then, using the navigation links, point to built docs. The built docs then have a relative link which then points to the version selection page. Stateless : Stateless means that no extra information is stored anywhere in order for the plugin to work. All the plugin needs is the previously built docs, a new version number and it can build the new docs, the version selection page and have the previous verions of the built docs available and accessible. Install \u00b6 It is highly recommended that you use Python Virtual Environments so not pollute your system install of Python. Once you create and activate your python environment, use pip to install the plugin. Requires Python version \u2265 3.6. pip install mkdocs pip install mkdocs-versioning Tip An alternative for managing Virtual Environments is Anaconda Navigator which provides a nice GUI for managing python virtual environments. Setup \u00b6 Once install is complete, use mkdocs new . to create an empty mkdocs project. You should then have an mkdocs.yml file as well as a docs/ directory. Now setup mkdocs.yml as shown below ( Note : You can add more to the config if you wish. This is just the minimum): Example edit_uri : \"\" plugins : - mkdocs-versioning : version : 0.3.0 nav : - Home : \"index.md\" - Version Selector : \"../\" Why is edit_uri blank Since the plugin stores the previous versions of the built documentation, the diting feature will only allow editing of the current documentation. Attemptin Write your documentation as normal using mkdocs serve to preview your docs as normal. When you run mkdocs build , the plugin will: Build your docs into a folder within site/ and will be named according to the value of version (in the example, the docs will be built into site/0.3.0/ ). Remove the old version selection page. Inside site/ build a new version selection page. Now when you want to build a new version, simply change the value of version (e.g. to 0.4.0) and build again, mkdocs should build the new, updated docs into its own folder and update the version selection page. Info This is just a basic working example, there is more functionality built into the docs such as a having a custom version selection page so it is recommended to read through the entire details section to get a full understanding of how the plugin works in order to take full advantage of the versioning capabilities.","title":"Home"},{"location":"#home","text":"Welcome to mkdocs-versioning! mkdocs-versioning is a tool that allows you to version documentation built using mkdocs allowing users to access historical versions of documentation. mkdocs-versioning works by building each documentation version into its own folder and having a central, continuously updating version selection page which points to each version built.","title":"Home"},{"location":"#design","text":"mkdocs-versioning is designed with the following principles in mind: Theme agnostic : The plugin should work with any mkdocs theme. mkdocs-versioning takes advantage of the navigation links to implement versioning. Strict versioning : Once a documentation is built, it should NOT be overwritten. mkdocs-versioning uses a centralised, continuously updated version selection page which then, using the navigation links, point to built docs. The built docs then have a relative link which then points to the version selection page. Stateless : Stateless means that no extra information is stored anywhere in order for the plugin to work. All the plugin needs is the previously built docs, a new version number and it can build the new docs, the version selection page and have the previous verions of the built docs available and accessible.","title":"Design"},{"location":"#install","text":"It is highly recommended that you use Python Virtual Environments so not pollute your system install of Python. Once you create and activate your python environment, use pip to install the plugin. Requires Python version \u2265 3.6. pip install mkdocs pip install mkdocs-versioning Tip An alternative for managing Virtual Environments is Anaconda Navigator which provides a nice GUI for managing python virtual environments.","title":"Install"},{"location":"#setup","text":"Once install is complete, use mkdocs new . to create an empty mkdocs project. You should then have an mkdocs.yml file as well as a docs/ directory. Now setup mkdocs.yml as shown below ( Note : You can add more to the config if you wish. This is just the minimum): Example edit_uri : \"\" plugins : - mkdocs-versioning : version : 0.3.0 nav : - Home : \"index.md\" - Version Selector : \"../\" Why is edit_uri blank Since the plugin stores the previous versions of the built documentation, the diting feature will only allow editing of the current documentation. Attemptin Write your documentation as normal using mkdocs serve to preview your docs as normal. When you run mkdocs build , the plugin will: Build your docs into a folder within site/ and will be named according to the value of version (in the example, the docs will be built into site/0.3.0/ ). Remove the old version selection page. Inside site/ build a new version selection page. Now when you want to build a new version, simply change the value of version (e.g. to 0.4.0) and build again, mkdocs should build the new, updated docs into its own folder and update the version selection page. Info This is just a basic working example, there is more functionality built into the docs such as a having a custom version selection page so it is recommended to read through the entire details section to get a full understanding of how the plugin works in order to take full advantage of the versioning capabilities.","title":"Setup"},{"location":"reference/","text":"How it works \u00b6 This page will describe how the plugin works by talking about the internal workings about the plugin. The following steps occur after a single mkdocs build command. 1. Building the main docs \u00b6 1.1 Pre-build \u00b6 The main documentation will be built into site/ in a folder equivalent to the version value in mkdocs.yml . The documentation will have the version number of the docs appended to the site_name value specified in mkdocs.yml . Example built docs directory. For version: 0.1.0 , the docs will be built in the directory site/0.1.0/... . The ... means files ( CSS , JS , HTML , etc) that are generated by mkdocs will be built into here. If a custom version selection page is specified, it is hidden by prefixing the filename with a . ( version_selection.md \u2192 .version_selection.md ). A custom version selection page can be specified as a plugin config option. Example mkdocs.yml with custom version selection page. plugins : - mkdocs-versioning : version : 0.3.0 version_selection_page : \"version_selection.md\" nav : - Home : \"index.md\" - Version Selector : \"../\" Post-build \u00b6 Once the docs have been built into its folder in the site directory, the custom version selection page (if specified) will be unhidden by removing the prefixed . from the filename ( .version_selection.md \u2192 version_selection.md ). Warning: Renaming files. The process of hiding uses Path.replace() from the pathlib module in order to rename files. Should the renaming fail, you may have markdown files with . prefixed onto the filename. A CLI command unhide_docs will remove the prefixed . from your markdown files. 2. Clearing out old version selection page \u00b6 The plugin then, in the site directory, removes all the files related to the version selection page. Since the built docs are in their own folders within the site directory, we can delete all the files in the root of the site directory, folders explicitly specified by the plugin as well as any user specified folders using the exclude_from_nav config option for the plugin. This option allows you to specify a list of directories the the plugin will ignore. This will then leave us with site/ containing only folders named according to previous and current version numbers and in each folder, the previous and current built documentation. Example mkdocs.yml with exclude_from_nav config option. plugins : - mkdocs-versioning : version : 0.3.0 exclude_from_nav : [ \"images\" ] nav : - Home : \"index.md\" - Version Selector : \"../\" 2.1 Why exclude_from_nav option \u00b6 mkdocs allows you have any files related to the building of the docs in the docs directory, this includes non-markdown files such as a folder containing images, stylesheets and more. The default behaviour of mkdocs is to copy these folders into the site directory where the built docs live. Since the building of the version selection page depends on the root of the site directory, you may have additional options (e.g. images, stylesheets) appearing in the version selection page. This option will exclude these options appearing on the version selection page as different versions of your documentation. 3. Building version selection page \u00b6 Since we are building the version selection page, we hide all the other docs by prefixing the filename with a . as mentioned in Step 1.1 . If a custom version selection markdown file is specified, we then unhide the version selection page and rename it to index.md . If a custom version selection markdown file is not specified, the plugin writes a basic version selection markdown file. After clearing the site directory, the only thing that should be left is a set of folders where each folder represents a different version. The folder names are used to create a nav in another separate mkdocs.version.yml file. mkdocs build is then triggered using the internal mkdocs API and the version selection page is then built into the root of the site directory. 4. Clean up \u00b6 Once the version selection page is built, the building of the docs is considered complete and all the HTML , CSS and JS has been generated. Since we hid the documentation in Step 3 , we then unhide the docs with special handling for the version selection page. If a custom version selection markdown file is specified, we then rename the version selection page from index.md to whatever it was initially called. If a custom version selection markdown file is not specified, we then delete the version selection markdown file as it was generated by the plugin itself.","title":"How it works"},{"location":"reference/#how-it-works","text":"This page will describe how the plugin works by talking about the internal workings about the plugin. The following steps occur after a single mkdocs build command.","title":"How it works"},{"location":"reference/#1-building-the-main-docs","text":"","title":"1. Building the main docs"},{"location":"reference/#11-pre-build","text":"The main documentation will be built into site/ in a folder equivalent to the version value in mkdocs.yml . The documentation will have the version number of the docs appended to the site_name value specified in mkdocs.yml . Example built docs directory. For version: 0.1.0 , the docs will be built in the directory site/0.1.0/... . The ... means files ( CSS , JS , HTML , etc) that are generated by mkdocs will be built into here. If a custom version selection page is specified, it is hidden by prefixing the filename with a . ( version_selection.md \u2192 .version_selection.md ). A custom version selection page can be specified as a plugin config option. Example mkdocs.yml with custom version selection page. plugins : - mkdocs-versioning : version : 0.3.0 version_selection_page : \"version_selection.md\" nav : - Home : \"index.md\" - Version Selector : \"../\"","title":"1.1 Pre-build"},{"location":"reference/#post-build","text":"Once the docs have been built into its folder in the site directory, the custom version selection page (if specified) will be unhidden by removing the prefixed . from the filename ( .version_selection.md \u2192 version_selection.md ). Warning: Renaming files. The process of hiding uses Path.replace() from the pathlib module in order to rename files. Should the renaming fail, you may have markdown files with . prefixed onto the filename. A CLI command unhide_docs will remove the prefixed . from your markdown files.","title":"Post-build"},{"location":"reference/#2-clearing-out-old-version-selection-page","text":"The plugin then, in the site directory, removes all the files related to the version selection page. Since the built docs are in their own folders within the site directory, we can delete all the files in the root of the site directory, folders explicitly specified by the plugin as well as any user specified folders using the exclude_from_nav config option for the plugin. This option allows you to specify a list of directories the the plugin will ignore. This will then leave us with site/ containing only folders named according to previous and current version numbers and in each folder, the previous and current built documentation. Example mkdocs.yml with exclude_from_nav config option. plugins : - mkdocs-versioning : version : 0.3.0 exclude_from_nav : [ \"images\" ] nav : - Home : \"index.md\" - Version Selector : \"../\"","title":"2. Clearing out old version selection page"},{"location":"reference/#21-why-exclude_from_nav-option","text":"mkdocs allows you have any files related to the building of the docs in the docs directory, this includes non-markdown files such as a folder containing images, stylesheets and more. The default behaviour of mkdocs is to copy these folders into the site directory where the built docs live. Since the building of the version selection page depends on the root of the site directory, you may have additional options (e.g. images, stylesheets) appearing in the version selection page. This option will exclude these options appearing on the version selection page as different versions of your documentation.","title":"2.1 Why exclude_from_nav option"},{"location":"reference/#3-building-version-selection-page","text":"Since we are building the version selection page, we hide all the other docs by prefixing the filename with a . as mentioned in Step 1.1 . If a custom version selection markdown file is specified, we then unhide the version selection page and rename it to index.md . If a custom version selection markdown file is not specified, the plugin writes a basic version selection markdown file. After clearing the site directory, the only thing that should be left is a set of folders where each folder represents a different version. The folder names are used to create a nav in another separate mkdocs.version.yml file. mkdocs build is then triggered using the internal mkdocs API and the version selection page is then built into the root of the site directory.","title":"3. Building version selection page"},{"location":"reference/#4-clean-up","text":"Once the version selection page is built, the building of the docs is considered complete and all the HTML , CSS and JS has been generated. Since we hid the documentation in Step 3 , we then unhide the docs with special handling for the version selection page. If a custom version selection markdown file is specified, we then rename the version selection page from index.md to whatever it was initially called. If a custom version selection markdown file is not specified, we then delete the version selection markdown file as it was generated by the plugin itself.","title":"4. Clean up"},{"location":"reference/cli/","text":"CLI commands \u00b6 This page will go into the available CLI commands that are available. Run mkdocs-versioning -h to access the built in help. Command: deploy \u00b6 This is used to deploy built docs to GitHub Pages. mkdocs has a built in command for deploying to GitHub Pages but the mkdocs command performs a build before deploying to GitHubs pages which will fail if you have already built the latest version of your docs. Regardless, it is recommended to use mkdocs-versioning deploy . Command: sync \u00b6 Used to copy the built docs from GitHub pages (By default, the gh-pages branch). Command: unhide \u00b6 If for whatever reason, during mkdocs build , it fails, you may have markdown files prefixed with a *.* , this command will remove all the *.* from all the markdown files ( .page.md \u2192 page.md ).","title":"CLI Options"},{"location":"reference/cli/#cli-commands","text":"This page will go into the available CLI commands that are available. Run mkdocs-versioning -h to access the built in help.","title":"CLI commands"},{"location":"reference/cli/#command-deploy","text":"This is used to deploy built docs to GitHub Pages. mkdocs has a built in command for deploying to GitHub Pages but the mkdocs command performs a build before deploying to GitHubs pages which will fail if you have already built the latest version of your docs. Regardless, it is recommended to use mkdocs-versioning deploy .","title":"Command: deploy"},{"location":"reference/cli/#command-sync","text":"Used to copy the built docs from GitHub pages (By default, the gh-pages branch).","title":"Command: sync"},{"location":"reference/cli/#command-unhide","text":"If for whatever reason, during mkdocs build , it fails, you may have markdown files prefixed with a *.* , this command will remove all the *.* from all the markdown files ( .page.md \u2192 page.md ).","title":"Command: unhide"},{"location":"reference/config_options/","text":"Config Options \u00b6 This page will go into more detail on the available config options that this plugin provides. Option: version \u00b6 This is a REQUIRED option. This lets the plugin know what version the docs belong to. It is recommended that you use semantic versioning but any versioning scheme works. The versions are parsed as type str and is sorted alphabetically in descending order. Example mkdocs.yml plugins : - mkdocs-versioning : version : 0.3.0 Option: exclude_from_nav \u00b6 This is a OPTIONAL option. This lets the plugin know what files to exclude from the navifation. The value should be a list of paths from the docs directory. Example mkdocs.yml plugins : - mkdocs-versioning : exclude_from_nav : [ \"images\" ] Option: version_selection_page \u00b6 This is a OPTIONAL option. This lets the plugin know if there is a custom version selection page and to use rather than the default. The markdown file should be located in the docs directory Example mkdocs.yml plugins : - mkdocs-versioning : version_selection_page : \"version_page.md\"","title":"Config Options"},{"location":"reference/config_options/#config-options","text":"This page will go into more detail on the available config options that this plugin provides.","title":"Config Options"},{"location":"reference/config_options/#option-version","text":"This is a REQUIRED option. This lets the plugin know what version the docs belong to. It is recommended that you use semantic versioning but any versioning scheme works. The versions are parsed as type str and is sorted alphabetically in descending order. Example mkdocs.yml plugins : - mkdocs-versioning : version : 0.3.0","title":"Option: version"},{"location":"reference/config_options/#option-exclude_from_nav","text":"This is a OPTIONAL option. This lets the plugin know what files to exclude from the navifation. The value should be a list of paths from the docs directory. Example mkdocs.yml plugins : - mkdocs-versioning : exclude_from_nav : [ \"images\" ]","title":"Option: exclude_from_nav"},{"location":"reference/config_options/#option-version_selection_page","text":"This is a OPTIONAL option. This lets the plugin know if there is a custom version selection page and to use rather than the default. The markdown file should be located in the docs directory Example mkdocs.yml plugins : - mkdocs-versioning : version_selection_page : \"version_page.md\"","title":"Option: version_selection_page"},{"location":"reference/step_by_step/","text":"How to Use \u00b6 This page is intended to be a step by step walkthrough on how to use this plugin in a typical environment. This will go through all the available config options as well as CLI commands available when you install this plugin. Version 0.1.0 \u00b6 Lets say, you are building a shape library. version 0.1.0 of the documentation is for circles. You want a custom version selection page and you have an images directory for images to be used for your docs which needs to be excluded from the version selection page nav (see here as to why). Your mkdocs.yml will look something like this: Example mkdocs.yml for version 0.1.0 plugins : - mkdocs-versioning : version : 0.1.0 exclude_from_nav : [ \"images\" ] version_selection_page : \"version_selection.md\" nav : - Home : \"index.md\" - Circle : \"circle.md\" - Version Selector : \"../\" When you run mkdocs build , your site directory looks something like this: Example site directory for version 0.1.0 . \u251c\u2500\u2500 0.1.0 \u2502 \u251c\u2500\u2500 ... \u251c\u2500\u2500 ... You then deploy the built docs to GitHub Pages using the command mkdocs-versioning deploy . See here as to why this plugin has its own deploy command. Warning The site directory should NOT be pushed to any GIT remotes (e.g. GitHub, GitLab, BitBucket etc) and should be ignored using .gitignore file. Version 0.2.0 \u00b6 The next version of the documentation you add documentation for triangles. The updated mkdocs.yml will look like the following: Example mkdocs.yml for version 0.2.0 plugins : - mkdocs-versioning : version : 0.2.0 exclude_from_nav : [ \"images\" ] version_selection_page : \"version_selection.md\" nav : - Home : \"index.md\" - Circle : \"circle.md\" - Triangle : \"triangle.md\" - Version Selector : \"../\" When you run mkdocs build , your site directory now looks something like this: Example site directory for version 0.2.0 . \u251c\u2500\u2500 0.1.0 \u2502 \u251c\u2500\u2500 ... \u251c\u2500\u2500 0.2.0 \u2502 \u251c\u2500\u2500 ... \u251c\u2500\u2500 ... You then deploy the built docs to GitHub Pages using the command mkdocs-versioning deploy . Version 0.3.0 \u00b6 The next version of the documentation you add documentation for quadrilateral but, you move to a new computer You perform a git clone to get a local copy of the repository from your remote but your site directory is empty since the site is not pushed to the remote (and should not be). You can use mkdocs-versioning sync which will copy the built docs from GitHub Pages into your site directory. The site directory should look exactly the same as the example site directory for version 0.2.0. Once you have a copy of your built docs, your updated mkdocs.yml will look like the following: Example mkdocs.yml for version 0.3.0 plugins : - mkdocs-versioning : version : 0.3.0 exclude_from_nav : [ \"images\" ] version_selection_page : \"version_selection.md\" nav : - Home : \"index.md\" - Circle : \"circle.md\" - Triangle : \"triangle.md\" - Quadrilateral : \"quadrilateral.md - Version Selector: \" ../\" When you run mkdocs build , your site directory now looks something like this: Example site directory for version 0.3.0 . \u251c\u2500\u2500 0.1.0 \u2502 \u251c\u2500\u2500 ... \u251c\u2500\u2500 0.2.0 \u2502 \u251c\u2500\u2500 ... \u251c\u2500\u2500 0.3.0 \u2502 \u251c\u2500\u2500 ... \u251c\u2500\u2500 ... You then deploy the built docs to GitHub Pages using the command mkdocs-versioning deploy .","title":"Step by Step Example"},{"location":"reference/step_by_step/#how-to-use","text":"This page is intended to be a step by step walkthrough on how to use this plugin in a typical environment. This will go through all the available config options as well as CLI commands available when you install this plugin.","title":"How to Use"},{"location":"reference/step_by_step/#version-010","text":"Lets say, you are building a shape library. version 0.1.0 of the documentation is for circles. You want a custom version selection page and you have an images directory for images to be used for your docs which needs to be excluded from the version selection page nav (see here as to why). Your mkdocs.yml will look something like this: Example mkdocs.yml for version 0.1.0 plugins : - mkdocs-versioning : version : 0.1.0 exclude_from_nav : [ \"images\" ] version_selection_page : \"version_selection.md\" nav : - Home : \"index.md\" - Circle : \"circle.md\" - Version Selector : \"../\" When you run mkdocs build , your site directory looks something like this: Example site directory for version 0.1.0 . \u251c\u2500\u2500 0.1.0 \u2502 \u251c\u2500\u2500 ... \u251c\u2500\u2500 ... You then deploy the built docs to GitHub Pages using the command mkdocs-versioning deploy . See here as to why this plugin has its own deploy command. Warning The site directory should NOT be pushed to any GIT remotes (e.g. GitHub, GitLab, BitBucket etc) and should be ignored using .gitignore file.","title":"Version 0.1.0"},{"location":"reference/step_by_step/#version-020","text":"The next version of the documentation you add documentation for triangles. The updated mkdocs.yml will look like the following: Example mkdocs.yml for version 0.2.0 plugins : - mkdocs-versioning : version : 0.2.0 exclude_from_nav : [ \"images\" ] version_selection_page : \"version_selection.md\" nav : - Home : \"index.md\" - Circle : \"circle.md\" - Triangle : \"triangle.md\" - Version Selector : \"../\" When you run mkdocs build , your site directory now looks something like this: Example site directory for version 0.2.0 . \u251c\u2500\u2500 0.1.0 \u2502 \u251c\u2500\u2500 ... \u251c\u2500\u2500 0.2.0 \u2502 \u251c\u2500\u2500 ... \u251c\u2500\u2500 ... You then deploy the built docs to GitHub Pages using the command mkdocs-versioning deploy .","title":"Version 0.2.0"},{"location":"reference/step_by_step/#version-030","text":"The next version of the documentation you add documentation for quadrilateral but, you move to a new computer You perform a git clone to get a local copy of the repository from your remote but your site directory is empty since the site is not pushed to the remote (and should not be). You can use mkdocs-versioning sync which will copy the built docs from GitHub Pages into your site directory. The site directory should look exactly the same as the example site directory for version 0.2.0. Once you have a copy of your built docs, your updated mkdocs.yml will look like the following: Example mkdocs.yml for version 0.3.0 plugins : - mkdocs-versioning : version : 0.3.0 exclude_from_nav : [ \"images\" ] version_selection_page : \"version_selection.md\" nav : - Home : \"index.md\" - Circle : \"circle.md\" - Triangle : \"triangle.md\" - Quadrilateral : \"quadrilateral.md - Version Selector: \" ../\" When you run mkdocs build , your site directory now looks something like this: Example site directory for version 0.3.0 . \u251c\u2500\u2500 0.1.0 \u2502 \u251c\u2500\u2500 ... \u251c\u2500\u2500 0.2.0 \u2502 \u251c\u2500\u2500 ... \u251c\u2500\u2500 0.3.0 \u2502 \u251c\u2500\u2500 ... \u251c\u2500\u2500 ... You then deploy the built docs to GitHub Pages using the command mkdocs-versioning deploy .","title":"Version 0.3.0"}]}